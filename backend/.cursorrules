# InternAI Backend Development Rules

## Project Overview
InternAI is a personalized AI assistant helping users land their first internship through:
- **MVP**: Roadmap Generator (tailored learning paths)
- **Current Features**: User onboarding, roadmap generation, resume analysis
- **Future**: Internship matching, mock interviews, skill gap detection

Built on **FastAPI** with **multi-agent AI architecture**:
- Base Agent: Abstract class for all AI agents
- Specialized Agents: RoadmapAgent, RecommendationAgent, ResumeAgent

## Current Architecture

### 1. Project Structure
```
backend/
├── app/
│   ├── agents/                 # AI agents (current)
│   │   ├── __init__.py
│   │   ├── base_agent.py       # BaseAgent abstract class
│   │   ├── roadmap_agent.py    # Roadmap generation
│   │   ├── recommendation_agent.py # Recommendations
│   │   ├── resume_agent.py     # Resume analysis
│   │   └── pipeline.py         # Agent orchestration
│   ├── api/                    # API layer
│   │   ├── api_router.py       # Main router
│   │   └── endpoints/          # API endpoints
│   │       ├── auth.py         # Authentication
│   │       ├── onboarding.py   # User onboarding
│   │       └── agents.py       # Agent endpoints
│   ├── core/                   # Core configuration
│   │   ├── config.py           # Settings & config
│   │   └── security.py         # Security utilities
│   ├── crud/                   # Database operations
│   │   ├── user.py
│   │   ├── onboarding.py
│   │   └── roadmap.py
│   ├── db/                     # Database setup
│   │   ├── base.py             # Base model
│   │   ├── session.py          # DB session
│   │   └── base_all.py         # Model registry
│   ├── models/                 # SQLAlchemy models
│   │   ├── user.py
│   │   ├── onboarding.py
│   │   ├── roadmap.py
│   │   └── learning_content.py
│   ├── schemas/                # Pydantic schemas
│   │   ├── auth.py
│   │   ├── onboarding.py
│   │   ├── user.py
│   │   └── agents.py
│   ├── utils/                  # Utilities
│   └── main.py                 # FastAPI app
├── requirements.txt            # Dependencies
├── alembic/                    # Database migrations
├── alembic.ini                 # Alembic config
└── .env                        # Environment variables
```

### 2. Current Tech Stack
- **Web Framework**: FastAPI 0.104.1
- **Database**: PostgreSQL with SQLAlchemy 2.0.23
- **Authentication**: Google OAuth + JWT tokens
- **AI**: OpenAI API (GPT-3.5 Turbo)
- **Migrations**: Alembic
- **Validation**: Pydantic

## Development Rules

### 3. Agent Development Standards

#### Base Agent Pattern (Current)
```python
from app.agents.base_agent import BaseAgent, AgentResponse

class YourAgent(BaseAgent):
    def __init__(self):
        super().__init__("YourAgent")
    
    async def run(self, input_data: Dict[str, Any]) -> AgentResponse:
        try:
            # Agent logic here
            result = await self.process_data(input_data)
            return self._create_response(True, result)
        except Exception as e:
            self.log_error(f"Error processing: {str(e)}")
            return self._create_response(False, error=str(e))
```

#### Agent Naming Convention
- Agent classes: `{Domain}Agent` (e.g., `RoadmapAgent`)
- Agent files: `{domain}_agent.py`
- Always inherit from `BaseAgent`
- Use the logging methods: `self.log_info()`, `self.log_error()`

#### AI Model Configuration
- **Always use GPT-3.5 Turbo** for cost efficiency
- Set reasonable token limits (max 4000 tokens)
- Include proper error handling for API failures
- Cache responses when possible

### 4. API Design Standards

#### Current Endpoint Structure
```
/api/
├── auth/                       # Authentication endpoints
│   ├── POST /login             # User login
│   ├── POST /google-login      # Google OAuth
│   └── GET /me                 # Get current user
├── onboarding/                 # User onboarding
│   ├── POST /                  # Create onboarding data
│   ├── GET /{user_id}          # Get onboarding data
│   └── PUT /{user_id}          # Update onboarding
└── agents/                     # AI agent endpoints
    ├── POST /roadmap           # Generate roadmap
    ├── POST /recommendation    # Get recommendations
    └── POST /resume-analysis   # Analyze resume
```

#### Response Format Standards
```python
# Success Response
{
    "success": true,
    "data": {...},
    "message": "Optional message"
}

# Error Response
{
    "success": false,
    "error": "Error message",
    "details": {...}  # Optional error details
}
```

#### API Endpoint Best Practices
```python
from fastapi import APIRouter, Depends, HTTPException
from app.core.security import get_current_user

router = APIRouter()

@router.post("/your-endpoint")
async def your_endpoint(
    request: YourSchema,
    current_user: User = Depends(get_current_user)
):
    try:
        # Process request
        result = await your_service.process(request, current_user)
        return {"success": True, "data": result}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
```

### 5. Database Model Standards

#### Base Model Pattern (Current)
```python
from app.db.base import Base
from sqlalchemy import Column, String, Boolean, DateTime, func

class YourModel(Base):
    __tablename__ = "your_table"
    
    # id, created_at, updated_at inherited from Base
    your_field = Column(String, nullable=False)
    is_active = Column(Boolean, default=True)
    
    # Relationships
    user = relationship("User", back_populates="your_model")
```

#### Database Best Practices
- Use meaningful table names (plural form)
- Add indexes on frequently queried fields
- Use nullable=False for required fields
- Include proper relationships with back_populates
- Use Alembic for all schema changes

#### Migration Best Practices
```bash
# Create new migration
alembic revision --autogenerate -m "descriptive message"

# Apply migrations
alembic upgrade head

# Review generated migration before applying
```

### 6. Configuration Management

#### Environment Variables (Required)
```bash
# Database
DATABASE_URL=postgresql://user:password@localhost/internai
POSTGRES_USER=postgres
POSTGRES_PASSWORD=your_password
POSTGRES_DB=internai

# Authentication
SECRET_KEY=your-secret-key
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

# AI Services
OPENAI_API_KEY=your-openai-api-key
```

#### Configuration Pattern
```python
# In app/core/config.py
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    # Database
    DATABASE_URL: Optional[str] = None
    
    # AI Services
    OPENAI_API_KEY: str = ""
    
    # CORS
    @property
    def cors_origins(self) -> List[str]:
        return [
            "http://localhost:5173",  # Vite dev server
            "http://localhost:3000",  # Alternative port
        ]
    
    class Config:
        case_sensitive = True
```

### 7. Error Handling & Logging

#### Structured Logging
```python
import logging

logger = logging.getLogger(__name__)

# In agents, use inherited logging
self.log_info("Processing started")
self.log_error("Processing failed")

# In other modules
logger.info("User created", extra={"user_id": user.id})
logger.error("Database error", extra={"error": str(e)})
```

#### Exception Handling
```python
# Custom exceptions
class InternAIException(Exception):
    def __init__(self, message: str, details: dict = None):
        self.message = message
        self.details = details or {}

# Use in endpoints
@router.post("/endpoint")
async def endpoint():
    try:
        # Business logic
        pass
    except InternAIException as e:
        raise HTTPException(status_code=400, detail=e.message)
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")
```

### 8. Security Best Practices

#### Authentication Flow
```python
# JWT token validation
from app.core.security import get_current_user

@router.get("/protected")
async def protected_endpoint(current_user: User = Depends(get_current_user)):
    return {"user": current_user.email}
```

#### Data Validation
```python
# Use Pydantic schemas for validation
from pydantic import BaseModel, validator

class UserSchema(BaseModel):
    email: str
    name: str
    
    @validator('email')
    def validate_email(cls, v):
        # Custom email validation
        return v.lower()
```

#### Security Headers
```python
# In main.py
from fastapi.middleware.cors import CORSMiddleware

app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)
```

### 9. Testing Standards

#### Test Structure (Recommended)
```
tests/
├── __init__.py
├── conftest.py                 # Pytest configuration
├── test_agents/               # Agent tests
│   ├── test_base_agent.py
│   ├── test_roadmap_agent.py
│   └── test_recommendation_agent.py
├── test_api/                  # API endpoint tests
│   ├── test_auth.py
│   ├── test_onboarding.py
│   └── test_agents.py
├── test_models/               # Model tests
│   ├── test_user.py
│   └── test_roadmap.py
└── fixtures/                  # Test data
    ├── users.py
    └── roadmaps.py
```

#### Test Patterns
```python
import pytest
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

@pytest.fixture
def test_user():
    return {
        "email": "test@example.com",
        "name": "Test User"
    }

def test_create_user(test_user):
    response = client.post("/api/auth/register", json=test_user)
    assert response.status_code == 200
    assert response.json()["success"] is True
```

### 10. Performance & Optimization

#### Database Query Optimization
```python
# Use eager loading for relationships
from sqlalchemy.orm import joinedload

def get_user_with_roadmap(db: Session, user_id: int):
    return db.query(User).options(
        joinedload(User.roadmap)
    ).filter(User.id == user_id).first()
```

#### Caching Strategy
```python
# Simple in-memory caching for AI responses
from functools import lru_cache

@lru_cache(maxsize=100)
def get_cached_roadmap(user_preferences: str):
    # Cache expensive AI operations
    pass
```

#### Async Operations
```python
# Use async/await for I/O operations
import httpx

async def call_openai_api(prompt: str):
    async with httpx.AsyncClient() as client:
        response = await client.post(
            "https://api.openai.com/v1/chat/completions",
            json={"messages": [{"role": "user", "content": prompt}]}
        )
        return response.json()
```

### 11. Code Quality Standards

#### Type Hints
```python
from typing import Dict, List, Optional, Any

async def process_data(
    data: Dict[str, Any], 
    user_id: int
) -> Optional[Dict[str, Any]]:
    # Implementation
    pass
```

#### Code Style
- Follow PEP 8 style guide
- Use descriptive variable names
- Keep functions under 50 lines
- Add docstrings for complex functions
- Use type hints throughout

#### Documentation
```python
def complex_function(param1: str, param2: int) -> Dict[str, Any]:
    """
    Process complex data transformation.
    
    Args:
        param1: Description of param1
        param2: Description of param2
        
    Returns:
        Dict containing processed data
        
    Raises:
        ValueError: If param1 is empty
    """
    pass
```

### 12. Deployment & Environment

#### Docker Configuration
```dockerfile
FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
```

#### Health Checks
```python
@router.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "version": "1.0.0"
    }
```

#### Environment Setup
```bash
# Development
export ENVIRONMENT=development
export DEBUG=true

# Production
export ENVIRONMENT=production
export DEBUG=false
```

## Development Workflow

1. **Feature Development**: Create feature branch, implement following patterns above
2. **Database Changes**: Use Alembic migrations for schema changes
3. **Testing**: Write tests for new functionality
4. **Code Review**: Focus on security, performance, and maintainability
5. **Deployment**: Test in staging before production

## Common Patterns

### CRUD Operations
```python
# In crud/base.py
class CRUDBase:
    def get(self, db: Session, id: int):
        return db.query(self.model).filter(self.model.id == id).first()
    
    def create(self, db: Session, obj_in: BaseModel):
        db_obj = self.model(**obj_in.dict())
        db.add(db_obj)
        db.commit()
        db.refresh(db_obj)
        return db_obj
```

### Dependency Injection
```python
from fastapi import Depends
from sqlalchemy.orm import Session
from app.db.session import get_db

def get_user_service(db: Session = Depends(get_db)):
    return UserService(db)
```

### Agent Pipeline
```python
async def process_with_agents(input_data: Dict[str, Any]):
    # Initialize agents
    roadmap_agent = RoadmapAgent()
    recommendation_agent = RecommendationAgent()
    
    # Process through pipeline
    roadmap_result = await roadmap_agent.run(input_data)
    if roadmap_result.success:
        recommendation_result = await recommendation_agent.run(roadmap_result.data)
        return recommendation_result
    
    return roadmap_result
```

## Monitoring & Maintenance

- Monitor API response times and error rates
- Track OpenAI API usage and costs
- Set up logging for debugging
- Regular database maintenance and backups
- Keep dependencies updated

## Future Enhancements

- **Redis**: For caching and session management
- **Celery**: For background job processing
- **Structured Logging**: With correlation IDs
- **API Rate Limiting**: To prevent abuse
- **Comprehensive Testing**: Unit and integration tests
- **API Documentation**: Enhanced OpenAPI docs
