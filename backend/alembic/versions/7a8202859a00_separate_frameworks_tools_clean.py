"""separate_frameworks_tools_clean

Revision ID: 7a8202859a00
Revises: 4c08070b32c9
Create Date: 2025-07-07 14:28:09.499974

"""
from typing import Sequence, Union
import json

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7a8202859a00'
down_revision: Union[str, None] = '4c08070b32c9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First, fix is_admin defaults
    op.execute("UPDATE learning_content SET is_admin = FALSE WHERE is_admin IS NULL")
    op.execute("UPDATE onboarding_data SET is_admin = FALSE WHERE is_admin IS NULL")
    op.execute("UPDATE roadmaps SET is_admin = FALSE WHERE is_admin IS NULL")
    op.execute("UPDATE users SET is_admin = FALSE WHERE is_admin IS NULL")
    
    # Add new columns as nullable first
    op.add_column('onboarding_data', sa.Column('frameworks', sa.JSON(), nullable=True))
    op.add_column('onboarding_data', sa.Column('tools', sa.JSON(), nullable=True))
    
    # Migrate data from frameworks_tools to frameworks and tools
    frameworks = ['React', 'Vue', 'Angular', 'Node.js', 'Django', 'Flask', 'FastAPI', 'Spring', 'Express']
    tools = ['Docker', 'AWS', 'Git', 'MongoDB', 'PostgreSQL', 'Redis', 'Kubernetes', 'Jenkins', 'Terraform']
    
    connection = op.get_bind()
    result = connection.execute(sa.text("SELECT id, frameworks_tools, preferred_tech_stack FROM onboarding_data"))
    
    for row in result:
        row_id, frameworks_tools_data, preferred_tech_stack_data = row
        
        # Split frameworks_tools into frameworks and tools
        if frameworks_tools_data:
            row_frameworks = [item for item in frameworks_tools_data if item in frameworks]
            row_tools = [item for item in frameworks_tools_data if item in tools]
        else:
            row_frameworks = []
            row_tools = []
        
        # Update frameworks and tools
        connection.execute(
            sa.text("UPDATE onboarding_data SET frameworks = :frameworks, tools = :tools WHERE id = :id"),
            {"frameworks": json.dumps(row_frameworks), "tools": json.dumps(row_tools), "id": row_id}
        )
    
    # Set defaults for any remaining null values
    op.execute("UPDATE onboarding_data SET frameworks = '[]' WHERE frameworks IS NULL")
    op.execute("UPDATE onboarding_data SET tools = '[]' WHERE tools IS NULL")
    
    # Now make the new columns NOT NULL
    op.alter_column('onboarding_data', 'frameworks', nullable=False)
    op.alter_column('onboarding_data', 'tools', nullable=False)
    
    # Handle preferred_tech_stack conversion
    # First, add a temporary column to store the converted values
    op.add_column('onboarding_data', sa.Column('preferred_tech_stack_temp', sa.String(), nullable=True))
    
    # Convert JSON array to single string
    result2 = connection.execute(sa.text("SELECT id, preferred_tech_stack FROM onboarding_data"))
    for row in result2:
        row_id, preferred_tech_stack_data = row
        
        if preferred_tech_stack_data and len(preferred_tech_stack_data) > 0:
            preferred_tech_stack_str = preferred_tech_stack_data[0]
        else:
            preferred_tech_stack_str = "Full-Stack Web Development"
        
        connection.execute(
            sa.text("UPDATE onboarding_data SET preferred_tech_stack_temp = :preferred_tech_stack WHERE id = :id"),
            {"preferred_tech_stack": preferred_tech_stack_str, "id": row_id}
        )
    
    # Set default for any remaining null values
    op.execute("UPDATE onboarding_data SET preferred_tech_stack_temp = 'Full-Stack Web Development' WHERE preferred_tech_stack_temp IS NULL")
    
    # Drop the old column and rename the temp column
    op.drop_column('onboarding_data', 'preferred_tech_stack')
    op.alter_column('onboarding_data', 'preferred_tech_stack_temp', new_column_name='preferred_tech_stack', nullable=False)
    
    # Drop the old frameworks_tools column
    op.drop_column('onboarding_data', 'frameworks_tools')
    
    # Now handle the NOT NULL constraints for other columns
    op.alter_column('learning_content', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('learning_content', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('learning_content', 'is_admin',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('onboarding_data', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('onboarding_data', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('onboarding_data', 'is_admin',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('roadmaps', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('roadmaps', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('roadmaps', 'is_admin',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'is_admin',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'is_admin',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('roadmaps', 'is_admin',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('roadmaps', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('roadmaps', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.add_column('onboarding_data', sa.Column('frameworks_tools', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.alter_column('onboarding_data', 'is_admin',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('onboarding_data', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('onboarding_data', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('onboarding_data', 'preferred_tech_stack',
               existing_type=sa.String(),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=False)
    op.drop_column('onboarding_data', 'tools')
    op.drop_column('onboarding_data', 'frameworks')
    op.alter_column('learning_content', 'is_admin',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('learning_content', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('learning_content', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    # ### end Alembic commands ###
